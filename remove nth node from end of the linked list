import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter the node values (comma-separated):");
        String[] nodeValues = scanner.nextLine().split(",");
        
        System.out.println("Enter the value of n:");
        int n = scanner.nextInt();
        
        ListNode head = createLinkedList(nodeValues);
        
        head = removeNthFromEnd(head, n);
        
        if (head != null) {
            System.out.println("Linked List after removing the " + n + "th node from the end:");
            printList(head);
        } else {
            System.out.println("Error: Unable to remove the " + n + "th node from the end.");
        }
    }

    public static ListNode createLinkedList(String[] nodeValues) {
        ListNode temp = new ListNode(0);
        ListNode current = temp;
        for (String val : nodeValues) {
            current.next = new ListNode(Integer.parseInt(val.trim()));
            current = current.next;
        }
        return temp.next;
    }
    
    public static ListNode removeNthFromEnd(ListNode head, int n) {
        if (head == null) return null;
        
        ListNode temp = new ListNode(0);
        temp.next = head;
        ListNode first = temp;
        ListNode second = temp;
        
        // Move first n+1 steps ahead
        for (int i = 1; i <= n + 1; i++) {
            if (first != null) {
                first = first.next;
            } else {
                return null; // n is larger than the length of the list
            }
        }
        
        // Move first to the end, maintaining the gap
        while (first != null) {
            first = first.next;
            second = second.next;
        }
        
        // Remove the nth node from the end
        if (second.next != null) {
            second.next = second.next.next;
        }
        
        return temp.next;
    }
    
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println(); // Print a newline after the list
    }
}
