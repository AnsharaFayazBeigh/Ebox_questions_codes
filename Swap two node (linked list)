import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the number of elements:");
        int n = scanner.nextInt();
        
        System.out.println("Enter the elements:");
        ListNode head = new ListNode(scanner.nextInt());
        ListNode current = head;
        for (int i = 1; i < n; i++) {
            current.next = new ListNode(scanner.nextInt());
            current = current.next;
        }
        
        System.out.println("Enter the positions to swap:");
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        
        head = swapNodes(head, x, y);
        
        System.out.println("Linked list after swapping nodes:");
        printList(head);
    }
    
    public static ListNode swapNodes(ListNode head, int x, int y) {
        if (x == y) return head;

        // Initialize previous and current pointers for x and y
        ListNode prevX = null, currX = head;
        for (int i = 0; currX != null && i < x; i++) {
            prevX = currX;
            currX = currX.next;
        }
        
        ListNode prevY = null, currY = head;
        for (int i = 0; currY != null && i < y; i++) {
            prevY = currY;
            currY = currY.next;
        }
        
        // If either x or y is out of range
        if (currX == null || currY == null) return head;
        
        // If x is not head of linked list
        if (prevX != null) {
            prevX.next = currY;
        } else { // Make y the new head
            head = currY;
        }

        // If y is not head of linked list
        if (prevY != null) {
            prevY.next = currX;
        } else { // Make x the new head
            head = currX;
        }

        // Swap next pointers
        ListNode temp = currX.next;
        currX.next = currY.next;
        currY.next = temp;

        return head;
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }
}
